{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","_useState5","_useState6","company","setComapny","_useState7","_useState8","giveway","setGiveway","_useState9","_useState10","listItens","setListItens","useEffect","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","setTimeout","stop","apply","this","arguments","componentDidMount","react_default","createElement","className","onSubmit","e","preventDefault","texto","window","encodeURIComponent","newItem","comapny","Axios","get","concat","console","log","value","type","id","onChange","target","react_input_mask_default","mask","defaultChecked","onClick","length","map","item","key","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2364d737.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport InputMask from 'react-input-mask';\nimport Axios from 'axios';\nimport './App.css';\n\nfunction App() {\n\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [company, setComapny] = useState(\"\");\n  const [giveway, setGiveway] = useState(1);\n\n  const [listItens, setListItens] = useState([\n    {name: \"Jessiley 1\", phone: \"(11) 9 4767:3811 \", company: \"TOTVS\", giveway: 0}, \n    {name: \"Jessiley 2\", phone: \"(11) 9 4767:3822 \", company: \"Vipal\", giveway: 1}, \n    {name: \"Jessiley 3\", phone: \"(11) 9 4767:3833 \", company: \"Grupo IV2\", giveway: 1}, \n    {name: \"Jessiley 4\", phone: \"(11) 9 4767:3844 \", company: \"Outro\", giveway: 1}]);\n  useEffect(() => {\n    const componentDidMount = async () => {\n      setTimeout(() => {\n        setListItens([\n          {name: \"Jessiley 1\", phone: \"(11) 9 4767:3811 \", company: \"TOTVS\", giveway: 1}, \n          {name: \"Jessiley 2\", phone: \"(11) 9 4767:3822 \", company: \"Vipal\", giveway: 0}, \n          {name: \"Jessiley 3\", phone: \"(11) 9 4767:3833 \", company: \"Grupo IV2\", giveway: 1}, \n          {name: \"Jessiley 5\", phone: \"(11) 9 4767:3844 \", company: \"Outro\", giveway: 1}]);\n      }, 2000);\n    }\n    \n    componentDidMount();\n  }, []);\n\n  const _handleSubmit = (e) => {\n    e.preventDefault();\n    let texto = \"Texto que eu vou enviar \\n com quebras de \\n texto.\";\n    texto = window.encodeURIComponent(texto);\n\n    const newItem = {name: name, phone: phone, comapny: company, giveway: giveway};\n    Axios.get(`https://api.whatsapp.com/send?phone=55${phone}&text=${texto}`)\n    console.log(newItem);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={_handleSubmit}>\n          <div><label>Nome: </label><input value={name} type=\"text\" id=\"name\" name=\"name\" onChange={e => setName(e.target.value)}/></div>\n          <div><label>Telefone: </label><InputMask mask=\"(99) 9 9999-9999\"  id=\"phone\" name=\"phone\" onChange={e => setPhone(e.target.value)} /></div>\n          <div><label>Nome: </label><input value={company} type=\"text\" id=\"company\" name=\"company\" onChange={e => setComapny(e.target.value)}/></div>\n          <div>\n            <label><input value=\"1\" type=\"radio\" name=\"giveway\" defaultChecked=\"true\" onClick={e => setGiveway(1)} />Sim</label>\n            <label><input value=\"0\" type=\"radio\" name=\"giveway\" onClick={e => setGiveway(0)}  />Não</label>\n          </div>\n          <div><input type=\"submit\" value=\"Salvar\"/></div>\n        </form>\n        <div className=\"list\">\n          {listItens.length > 0 && listItens.map((item, key) => {\n            return(<div key={key}>\n              <div>{item.name}</div>\n              <div>{item.phone}</div>\n              <div>{item.comapny}</div>\n              <div>{item.giveway === 1 ? \"Sim\" : item.giveway === 0 ? \"Não\" : \"erro\"}</div>\n            </div>\n            )\n          })}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}